name: Validate Repository

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  validate-markdown:
    runs-on: ubuntu-latest
    name: Validate Markdown Files

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install markdown linter
        run: npm install -g markdownlint-cli

      - name: Lint markdown files
        run: |
          if [ -f ".markdownlint.json" ]; then
            markdownlint "**/*.md" --ignore node_modules --config .markdownlint.json
          else
            markdownlint "**/*.md" --ignore node_modules
          fi

      # Run link check WITH config only if the config file exists
      - name: Check for broken links (with config)
        continue-on-error: true
        if: hashFiles('.github/markdown-link-check-config.json') != ''
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          use-verbose-mode: 'yes'
          config-file: '.github/markdown-link-check-config.json'

      # Fallback without config so the job still runs if config is absent
      - name: Check for broken links (no config)
        continue-on-error: true
        if: hashFiles('.github/markdown-link-check-config.json') == ''
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          use-verbose-mode: 'yes'

  validate-structure:
    runs-on: ubuntu-latest
    name: Validate Repository Structure

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate required files exist
        run: |
          # Check for core workflow files (use actual filenames in repo)
          test -f "create-trd-md.md" || (echo "Missing create-trd-md.md" && exit 1)
          test -f "generate-test-strategy-md.md" || (echo "Missing generate-test-strategy-md.md" && exit 1)
          test -f "generate-test-tasks-md.md" || (echo "Missing generate-test-tasks-md.md" && exit 1)
          test -f "implement-test-task-md.md" || (echo "Missing implement-test-task-md.md" && exit 1)
          test -f "generate-test-report-md.md" || (echo "Missing generate-test-report-md.md" && exit 1)

          # Check for documentation files (use actual filenames in repo)
          test -f "README.md" || (echo "Missing README.md" && exit 1)
          test -f "quick-start-guide.md" || (echo "Missing quick-start-guide.md" && exit 1)
          test -f "contributing-guide.md" || (echo "Missing contributing-guide.md" && exit 1)

          # Check core directories exist
          test -d "examples" || (echo "Missing examples/ directory" && exit 1)
          test -d "templates" || (echo "Missing templates/ directory" && exit 1)
          test -d "docs" || (echo "Missing docs/ directory" && exit 1)

          echo "✅ All required files and directories present"

      - name: Validate workflow file structure
        run: |
          # Check that each workflow guidance file has required sections
          for file in create-trd-md.md generate-test-strategy-md.md generate-test-tasks-md.md implement-test-task-md.md generate-test-report-md.md; do
            echo "Validating $file..."

            # Check for role definition
            grep -q "You are a" "$file" || (echo "Missing role definition in $file" && exit 1)

            # Check for usage instructions
            grep -qi "usage instructions" "$file" || (echo "Missing usage instructions in $file" && exit 1)

            echo "✅ $file structure valid"
          done

  spell-check:
    runs-on: ubuntu-latest
    name: Spell Check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Run with custom config only if it exists
      - name: Run spell check (with config)
        continue-on-error: true
        if: hashFiles('.github/typos.toml') != ''
        uses: crate-ci/typos@master
        with:
          config: .github/typos.toml

      # Fallback without config
      - name: Run spell check (default)
        continue-on-error: true
        if: hashFiles('.github/typos.toml') == ''
        uses: crate-ci/typos@master

  validate-examples:
    runs-on: ubuntu-latest
    name: Validate Examples

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Basic check that JavaScript code blocks exist and are non-empty.
      # Note: Node does not support a "syntax check only" flag out of the box.
      - name: Inspect JavaScript example blocks
        run: |
          set -e
          shopt -s globstar || true
          for file in **/*.md; do
            echo "Scanning $file for JavaScript code blocks..."
            count=$(awk '/```javascript/{flag=1;next}/```/{flag=0}flag{print}' "$file" | wc -c)
            if [ "$count" -gt 0 ]; then
              echo "Found JavaScript code content in $file (bytes: $count)"
            fi
          done

      - name: Validate code completeness
        run: |
          # Check that code examples are complete (have imports, proper structure)
          for file in examples/*.md templates/*.md; do
            if [ -f "$file" ]; then
              echo "Validating code completeness in $file..."

              # Check for common patterns that indicate complete examples
              if grep -q "```javascript" "$file"; then
                grep -qE "import|require|describe|it|test" "$file" || \
                echo "⚠️  JavaScript examples in $file may be incomplete"
              fi
            fi
          done

  update-stats:
    runs-on: ubuntu-latest
    name: Update Repository Stats
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate repository statistics
        run: |
          echo "# Repository Statistics" > STATS.md
          echo "" >> STATS.md
          echo "Generated on: $(date)" >> STATS.md
          echo "" >> STATS.md
          echo "## File Counts" >> STATS.md
          echo "- Workflow files: $(ls *.md | grep -E '(create-trd|generate-|implement-)' | wc -l)" >> STATS.md
          echo "- Example files: $(find examples/ -name "*.md" 2>/dev/null | wc -l)" >> STATS.md
          echo "- Template files: $(find templates/ -name "*.md" 2>/dev/null | wc -l)" >> STATS.md
          echo "- Documentation files: $(find docs/ -name "*.md" 2>/dev/null | wc -l)" >> STATS.md
          echo "" >> STATS.md
          echo "## Content Analysis" >> STATS.md
          echo "- Total lines of documentation: $(cat *.md | wc -l)" >> STATS.md
          echo "- Code examples: $(grep -c '\`\`\`' *.md)" >> STATS.md
          echo "- Testing frameworks mentioned: $(grep -i -o 'jest\|cypress\|playwright\|vitest\|mocha' *.md | sort -u | wc -l)" >> STATS.md

      - name: Commit statistics
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add STATS.md
          git diff --staged --quiet || git commit -m "Update repository statistics [skip ci]"
          git push
